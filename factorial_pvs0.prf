(factorial_pvs0
 (factorial_op1_TCC1 0
  (factorial_op1_TCC1-1 nil 3682021933 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (IMP_ccg_to_mwg_TCC1 0
  (IMP_ccg_to_mwg_TCC1-1 nil 3681482314 ("" (assert) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (M_TCC1 0
  (M_TCC1-1 nil 3682020153 ("" (subtype-tcc) nil nil) nil nil))
 (A_TCC1 0
  (A_TCC1-1 nil 3681130066 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A_TCC2 0
  (A_TCC2-1 nil 3681130066 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (A_TCC3 0
  (A_TCC3-1 nil 3681130066 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (factorial_mm_TCC1 0
  (factorial_mm_TCC1-2 "" 3681838142
   ("" (rewrite "indi_f_equiv")
    (("" (expand "indi_f_sound_iter")
      (("" (expand "indi_f_sound_iter")
        (("" (expand "indi_f_sound_iter")
          (("" (eval-expr "factorial_ccg`dg`data")
            (("" (replaces -1)
              (("" (expand "indi_f_sound_all_vertex")
                (("" (expand "indi_f_sound_all_vertex")
                  (("" (split)
                    (("1" (flatten)
                      (("1" (eval-formula -1)
                        (("1" (hide -1)
                          (("1" (expand "gt")
                            (("1" (expand "factorial_ccg")
                              (("1"
                                (expand "make_ccg")
                                (("1"
                                  (expand "factorial_measures")
                                  (("1"
                                    (expand "ge")
                                    (("1"
                                      (expand "le")
                                      (("1"
                                        (expand "eval_conds")
                                        (("1"
                                          (expand "eval_conds_rec")
                                          (("1"
                                            (expand "eval_conds_rec")
                                            (("1"
                                              (expand*
                                               "pvs0_factorial"
                                               "factorial_false")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (expand
                                                   "semantic_rel_expr")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel_expr")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (eval-formula -1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((indi_f_sound_iter def-decl "{b: bool |
         (FORALL (i_: below(N), j_: below(N)):
            i_ > i OR (i_ = i AND j_ >= j) IMPLIES
             (FORALL (c: vert(dg(G))):
                (get(f(c))(i_, j_) = 1 IMPLIES gt(ms(G), c, i_, j_, FALSE))
                 AND
                 (get(f(c))(i_, j_) = 0 IMPLIES
                   gt(ms(G), c, i_, j_, TRUE))))
          = b}" ccg_to_mwg "CCG/")
    (factorial_measures const-decl "FunMeasures" factorial_pvs0 nil)
    (le const-decl "bool" ccg_def "CCG/")
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (factorial_false const-decl "nat" factorial_pvs0 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge const-decl "bool" ccg_def "CCG/")
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (gt const-decl "bool" ccg "CCG/")
    (FALSE const-decl "bool" booleans nil)
    (indi_f_sound_all_vertex def-decl "bool" ccg_to_mwg "CCG/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (< const-decl "bool" reals nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (A const-decl "Measure_Matrix" factorial_pvs0 nil)
    (indi_f type-eq-decl nil ccg_to_mwg "CCG/")
    (Measure_Matrix type-eq-decl nil measures "CCG/")
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (factorial_ccg const-decl "CCG" factorial_pvs0 nil)
    (CCG type-eq-decl nil ccg_def "CCG/")
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (indi_f_equiv formula-decl nil ccg_to_mwg "CCG/"))
   shostak))
 (pvs0_factorial_tcc_termination 0
  (pvs0_factorial_tcc_termination-1 nil 3681472896
   ("" (expand "pvs0_tcc_termination")
    (("" (expand "pvs0_tcc_termination_pred")
      (("" (inst 1 "LAMBDA (n:nat): n")
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (typepred "cc")
                (("" (use "pvs0_ccs_completness")
                  (("" (eval-expr "pvs0_ccs(pvs0_factorial`4)")
                    (("" (replaces -1)
                      (("" (expand* "member")
                        (("" (expand* "member")
                          (("" (replaces -1)
                            (("" (assert)
                              ((""
                                (expand "semantic_rel_expr")
                                ((""
                                  (expand "semantic_rel_expr")
                                  ((""
                                    (expand "pvs0_factorial" -2)
                                    ((""
                                      (expand "eop1" -2)
                                      ((""
                                        (skeep)
                                        ((""
                                          (replaces -2)
                                          ((""
                                            (replaces -2)
                                            ((""
                                              (hide -1)
                                              ((""
                                                (lift-if)
                                                ((""
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "eval_conds")
                                                    (("1"
                                                      (expand
                                                       "eval_conds_rec")
                                                      (("1"
                                                        (expand
                                                         "eval_conds_rec")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "semantic_rel_expr")
                                                            (("1"
                                                              (expand
                                                               "pvs0_factorial")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "env")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (pvs0_ccs_completness formula-decl nil pvs0_to_dg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (factorial_false const-decl "nat" factorial_pvs0 nil)
    (eval_conds_rec def-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pvs0_ccs const-decl "list[(pvs0_tcc_valid_cc(def))]" pvs0_to_dg
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (pvs0bool? adt-recognizer-decl "[PVS0Bool -> boolean]" PVS0Bool_adt
     nil)
    (pvs0bool adt-constructor-decl "[PVS0Expr[T] -> (pvs0bool?)]"
     PVS0Bool_adt nil)
    (vr? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (vr adt-constructor-decl "(vr?)" PVS0Expr_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (rec adt-constructor-decl "[PVS0Expr -> (rec?)]" PVS0Expr_adt nil)
    (op1? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (op1 adt-constructor-decl "[[nat, PVS0Expr] -> (op1?)]"
     PVS0Expr_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (Path type-eq-decl nil pvs0_cc nil)
    (rec? adt-recognizer-decl "[PVS0Expr -> boolean]" PVS0Expr_adt nil)
    (PVS0Expr_CC type-eq-decl nil pvs0_cc nil)
    (pvs0_tcc_valid_cc const-decl "bool" pvs0_cc nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil))
   nil))
 (factorial_msr_TCC1 0
  (factorial_msr_TCC1-1 nil 3681214054
   ("" (use "wf_nat") (("" (grind) nil nil)) nil)
   ((well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" ordered_nat "orders/")
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     ordered_nat "orders/")
    (strict_order_restrict application-judgement "(strict_order?[S])"
     ordered_nat "orders/")
    (transitive_restrict application-judgement "(transitive?[S])"
     ordered_nat "orders/")
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     ordered_nat "orders/")
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     ordered_nat "orders/")
    (wf_nat formula-decl nil naturalnumbers nil))
   nil))
 (factorial_msr 0
  (factorial_msr-1 nil 3681214068
   ("" (lemma "ccg_implies_pvs0_tcc")
    (("" (expand "pvs0_tcc_termination")
      (("" (inst -1 "pvs0_factorial")
        (("" (split)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (expand "ccg_termination_pvs0")
              (("2" (inst 1 "factorial_measures")
                (("2" (use "mwg_termination_to_ccg_termination")
                  (("1" (inst -1 "factorial_mm")
                    (("1" (beta)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (use "c_bounding_from_gl_termination")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1" (eval-formula) nil nil))
                                nil))
                              nil)
                             ("2" (use "wf_nat") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (typepred "factorial_mm")
                        (("2" (expand "factorial_ccg")
                          (("2" (expand "factorial_dg")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "wf_nat") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (ccg_termination_pvs0 const-decl "bool" ccg_to_pvs0 nil)
    (eval_conds const-decl "bool" pvs0_cc nil)
    (semantic_rel_expr inductive-decl "bool" pvs0_expr nil)
    (mwg_termination_to_ccg_termination formula-decl nil ccg_to_mwg
     "CCG/")
    (pvs0_to_dg const-decl "(cdigraph)" pvs0_to_dg nil)
    (make_ccg const-decl "CCG" ccg_def "CCG/")
    (CCG type-eq-decl nil ccg_def "CCG/")
    (cdigraph const-decl "bool" c_digraphs_def "digraphs/")
    (ComputableDigraph type-eq-decl nil c_digraphs_def "digraphs/")
    (CallingContext type-eq-decl nil cc_def "CCG/")
    (factorial_dg const-decl "(cdigraph)" factorial_pvs0 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "Measure_Matrix" measures "CCG/")
    (id const-decl "Measure_Matrix" measures "CCG/")
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def
     "digraphs/")
    (wdg type-eq-decl nil matrix_wdg "CCG/")
    (wgd_type type-eq-decl nil c_weighted_digraphs_def "digraphs/")
    (c_digraph type-eq-decl nil c_digraphs_def "digraphs/")
    (edges const-decl "bool" c_digraphs_def "digraphs/")
    (get_wgt const-decl "Weight" c_weighted_digraphs_def "digraphs/")
    (edge? const-decl "bool" digraphs_ "digraphs/")
    (edge type-eq-decl nil digraphs_ "digraphs/")
    (weight const-decl "Measure_Matrix[N]" ccg_to_mwg "CCG/")
    (ccg_to_mwg const-decl "{W: wgd_type |
         dg(W) = dg(G) AND
          (FORALL (e: (edges(dg(G)))): get_wgt(W, e) = weight(G)(f)(e))}"
     ccg_to_mwg "CCG/")
    (c_bounding_from_gl_termination formula-decl nil bounding_circuits
     "CCG/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil c_digraphs_imp "digraphs/")
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp "digraphs/")
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     "digraphs/")
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp "digraphs/")
    (vert? const-decl "bool" digraphs_ "digraphs/")
    (factorial_ccg const-decl "CCG" factorial_pvs0 nil)
    (vert type-eq-decl nil digraphs_ "digraphs/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures "CCG/")
    (indi_f type-eq-decl nil ccg_to_mwg "CCG/")
    (indi_f_sound const-decl "bool" ccg_to_mwg "CCG/")
    (factorial_mm const-decl "(indi_f_sound(factorial_ccg))"
     factorial_pvs0 nil)
    (pvs0_factorial_tcc_termination name-judgement
     "(pvs0_tcc_termination)" factorial_pvs0 nil)
    (factorial_measures const-decl "FunMeasures" factorial_pvs0 nil)
    (FunMeasures type-eq-decl nil ccg_def "CCG/")
    (FunMeasure type-eq-decl nil ccg_def "CCG/")
    (Path type-eq-decl nil pvs0_cc nil)
    (Conditions type-eq-decl nil pvs0_cc nil)
    (list type-decl nil list_adt nil)
    (PVS0Bool type-decl nil PVS0Bool_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (ccg_implies_pvs0_tcc formula-decl nil ccg_to_pvs0 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (MT type-eq-decl nil pvs0_prelude nil)
    (< const-decl "bool" reals nil))
   shostak))
 (factorial_terminates 0
  (factorial_terminates-1 nil 3681134675
   ("" (use "factorial_msr")
    (("" (skeep)
      (("" (use "scp_iff_pvs0_terminates")
        (("" (assert)
          (("" (hide 2)
            (("" (use "pvs0_tcc_implies_scp")
              (("" (expand "pvs0_tcc_termination")
                (("" (inst 1 "m") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pvs0_factorial_tcc_termination name-judgement
     "(pvs0_tcc_termination)" factorial_pvs0 nil)
    (pvs0_tcc_implies_scp formula-decl nil scp_iff_pvs0 nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scp_iff_pvs0_terminates formula-decl nil scp_iff_pvs0 nil)
    (factorial_msr formula-decl nil factorial_pvs0 nil))
   shostak))
 (factorial_wfm_TCC1 0
  (factorial_wfm_TCC1-1 nil 3681217137
   ("" (lemma "pvs0_factorial_tcc_termination")
    (("" (expand "pvs0_tcc_termination")
      (("" (skeep -) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((pvs0_tcc_termination const-decl "bool" measure_termination_defs
     nil)
    (pvs0_factorial const-decl "PVS0" factorial_pvs0 nil)
    (pvs0_tcc_termination_pred const-decl "bool"
     measure_termination_defs nil)
    (PVS0 type-eq-decl nil pvs0_lang nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (PVS0Expr type-decl nil PVS0Expr_adt nil)
    (EvalOp2 type-eq-decl nil pvs0_expr nil)
    (EvalOp1 type-eq-decl nil pvs0_expr nil)
    (WFM type-eq-decl nil measure_termination_defs nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (Val type-eq-decl nil pvs0_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pvs0_factorial_tcc_termination name-judgement
     "(pvs0_tcc_termination)" factorial_pvs0 nil)
    (pvs0_factorial_tcc_termination judgement-tcc nil factorial_pvs0
     nil))
   nil))
 (factorial_pvs0_n 0
  (factorial_pvs0_n-2 nil 3682179582
   ("" (skeep)
    (("" (case-replace "n=0")
      (("1" (assert)
        (("1" (expand "factorial_pvs0")
          (("1" (lemma "Omega_eval_correct")
            (("1" (inst -1 "pvs0_factorial" 0 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (expand "semantic_rel")
                    (("1" (expand "semantic_rel_expr")
                      (("1" (expand "pvs0_factorial" 1)
                        (("1" (expand "semantic_rel_expr")
                          (("1" (inst 1 0)
                            (("1" (expand "factorial_false")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "factorial_pvs0")
          (("2" (expand "Omega_eval")
            (("2" (expand "eval")
              (("2" (expand "pvs0_factorial" 2 4)
                (("2" (expand "eval_expr" 2 1)
                  (("2" (postpone) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (factorial_pvs0_n-1 nil 3682175488
   ("" (induct "n")
    (("1" (expand "factorial_pvs0") (("1" (grind) nil nil)) nil)
     ("2" (skeep :preds? t) (("2" (postpone) nil nil)) nil)
     ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak)))

